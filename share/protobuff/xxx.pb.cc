// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xxx.proto

#include "xxx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace test {
class TestxxxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Testxxx> _instance;
} _Testxxx_default_instance_;
}  // namespace test
static void InitDefaultsTestxxx_xxx_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test::_Testxxx_default_instance_;
    new (ptr) ::test::Testxxx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::test::Testxxx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Testxxx_xxx_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTestxxx_xxx_2eproto}, {}};

void InitDefaults_xxx_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Testxxx_xxx_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_xxx_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_xxx_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_xxx_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_xxx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::Testxxx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test::Testxxx, aa_),
  PROTOBUF_FIELD_OFFSET(::test::Testxxx, bb_),
  PROTOBUF_FIELD_OFFSET(::test::Testxxx, cc_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::test::Testxxx)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::test::_Testxxx_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_xxx_2eproto = {
  {}, AddDescriptors_xxx_2eproto, "xxx.proto", schemas,
  file_default_instances, TableStruct_xxx_2eproto::offsets,
  file_level_metadata_xxx_2eproto, 1, file_level_enum_descriptors_xxx_2eproto, file_level_service_descriptors_xxx_2eproto,
};

const char descriptor_table_protodef_xxx_2eproto[] =
  "\n\txxx.proto\022\004test\"-\n\007Testxxx\022\n\n\002aa\030\001 \001(\005"
  "\022\n\n\002bb\030\002 \001(\005\022\n\n\002cc\030\003 \001(\005b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_xxx_2eproto = {
  false, InitDefaults_xxx_2eproto, 
  descriptor_table_protodef_xxx_2eproto,
  "xxx.proto", &assign_descriptors_table_xxx_2eproto, 72,
};

void AddDescriptors_xxx_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_xxx_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_xxx_2eproto = []() { AddDescriptors_xxx_2eproto(); return true; }();
namespace test {

// ===================================================================

void Testxxx::InitAsDefaultInstance() {
}
class Testxxx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Testxxx::kAaFieldNumber;
const int Testxxx::kBbFieldNumber;
const int Testxxx::kCcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Testxxx::Testxxx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:test.Testxxx)
}
Testxxx::Testxxx(const Testxxx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&aa_, &from.aa_,
    static_cast<size_t>(reinterpret_cast<char*>(&cc_) -
    reinterpret_cast<char*>(&aa_)) + sizeof(cc_));
  // @@protoc_insertion_point(copy_constructor:test.Testxxx)
}

void Testxxx::SharedCtor() {
  ::memset(&aa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cc_) -
      reinterpret_cast<char*>(&aa_)) + sizeof(cc_));
}

Testxxx::~Testxxx() {
  // @@protoc_insertion_point(destructor:test.Testxxx)
  SharedDtor();
}

void Testxxx::SharedDtor() {
}

void Testxxx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Testxxx& Testxxx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Testxxx_xxx_2eproto.base);
  return *internal_default_instance();
}


void Testxxx::Clear() {
// @@protoc_insertion_point(message_clear_start:test.Testxxx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&aa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cc_) -
      reinterpret_cast<char*>(&aa_)) + sizeof(cc_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Testxxx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Testxxx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 aa = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_aa(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bb = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bb(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 cc = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Testxxx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:test.Testxxx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 aa = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bb = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:test.Testxxx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:test.Testxxx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Testxxx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:test.Testxxx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 aa = 1;
  if (this->aa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->aa(), output);
  }

  // int32 bb = 2;
  if (this->bb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bb(), output);
  }

  // int32 cc = 3;
  if (this->cc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:test.Testxxx)
}

::google::protobuf::uint8* Testxxx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.Testxxx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 aa = 1;
  if (this->aa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->aa(), target);
  }

  // int32 bb = 2;
  if (this->bb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bb(), target);
  }

  // int32 cc = 3;
  if (this->cc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Testxxx)
  return target;
}

size_t Testxxx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.Testxxx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 aa = 1;
  if (this->aa() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->aa());
  }

  // int32 bb = 2;
  if (this->bb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bb());
  }

  // int32 cc = 3;
  if (this->cc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Testxxx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.Testxxx)
  GOOGLE_DCHECK_NE(&from, this);
  const Testxxx* source =
      ::google::protobuf::DynamicCastToGenerated<Testxxx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.Testxxx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.Testxxx)
    MergeFrom(*source);
  }
}

void Testxxx::MergeFrom(const Testxxx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.Testxxx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.aa() != 0) {
    set_aa(from.aa());
  }
  if (from.bb() != 0) {
    set_bb(from.bb());
  }
  if (from.cc() != 0) {
    set_cc(from.cc());
  }
}

void Testxxx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.Testxxx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Testxxx::CopyFrom(const Testxxx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.Testxxx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Testxxx::IsInitialized() const {
  return true;
}

void Testxxx::Swap(Testxxx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Testxxx::InternalSwap(Testxxx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(aa_, other->aa_);
  swap(bb_, other->bb_);
  swap(cc_, other->cc_);
}

::google::protobuf::Metadata Testxxx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_xxx_2eproto);
  return ::file_level_metadata_xxx_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace test
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::test::Testxxx* Arena::CreateMaybeMessage< ::test::Testxxx >(Arena* arena) {
  return Arena::CreateInternal< ::test::Testxxx >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
